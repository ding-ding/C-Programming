store : 메모리의 내용을 레지스터로


page 228 ldr
#include <stdio.h>

unsigned int arr[5] = {1, 2, 3, 4, 5};

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{ 
	register unsigned int r0 asm("r0") = 0;
	register unsigned int *r1 asm("r1") = NULL;
	register unsigned int *r2 asm("r2") = NULL;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	r1 = arr;

	asm volatile("mov r2, #0x4");
	asm volatile("ldr r0, [r1], r2"); // r0에는 r1의 주소, [r1]을 #0x4만큼 증가 

	printf("r0 = %u, r1 = %u\n", r0, *r1);	// r0 에는 1, r1 에는 2

	return 0;
}



#include <stdio.h>

int main(void)
{ 
	int i;
	unsigned int test_arr[5] = {0};

	register unsigned int *r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	r0 = test_arr;
						// lsl 은 2 ^ n 
	asm volatile("mov r1, #0x3");		// r1 = 3
	asm volatile("mov r2, r1, lsl #2");	// r2 = 3 * 4
	asm volatile("mov r4, #0x2");		// r4 = 2
	asm volatile("add r3, r1, r2, lsl r4");	// r3 = 3 + 12 * 4
	asm volatile("stmia r0, {r1, r2, r3}");	// 3, 12, 51

	for(i = 0; i < 5; i++)
		printf("test_arr[%d] = %d\n", i, test_arr[i]);

	return 0;
}


#include <stdio.h>

int main(void)
{ 
	int i;
	unsigned int test_arr[5] = {0};

	register unsigned int *r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	r0 = test_arr;

	asm volatile("mov r1, #0x3");
	asm volatile("mov r2, r1, lsl #2");
	asm volatile("mov r4, #0x2");
	asm volatile("add r3, r1, r2, lsl r4");
	asm volatile("stmia r0!, {r1, r2, r3}");	// 느낌표가 잇으면 r0가 가리키는 값이 바뀐다. 0 -> 1 -> 2 -> 3
	asm volatile("str r4, [r0]");	// r0가 3번째를 가리키고 있으므로 test_arr[3] 에 r4를 집어넣는다.

	for(i = 0; i < 5; i++)
		printf("test_arr[%d] = %d\n", i, test_arr[i]);

	return 0;
}


ldm stm



#include <stdio.h>

int main(void)
{ 
	int i;
	unsigned int test_arr[7] = {0};

	register unsigned int *r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;
	register unsigned int r6 asm("r6") = 0;

	r0 = test_arr;

	asm volatile("mov r1, #0x3\n"
				"mov r2, r1, lsl #2\n"
				"mov r4, #0x2\n"
				"add r3, r1, r2, lsl r4\n"
				"stmia r0!, {r1, r2, r3}\n"
				"str r4, [r0]\n" 		// r4 = 2 	*str 레지스터를 가져와서 시스템 메모리에 저장
				"mov r5, #128\n"		// r5 = 128
				"mov r6, r5, lsr #3\n"		// lsr : 2^n으로 나누기 r6 = 128 / 8 = 16
				"stmia r0, {r4, r5, r6}\n"	// 2, 128, 16
				"sub r0, r0, #12\n"
				"ldmia r0, {r4, r5, r6}");

	for(i = 0; i < 7; i++)
		printf("test_arr[%d] = %d\n", i, test_arr[i]);

	printf("r4 = %u, r5 = %u, r6 = %u\n", r4, r5, r6);

	return 0;
}





#include <stdio.h>

int my_func(int num)
{
	return num * 2;
}

int main(void)
{
	int res, num = 2;
	res = my_func(num);
	printf("res = %d\n", res);
	return 0;
}

(gdb) disas
Dump of assembler code for function main:
   0x00010460 <+0>:	push	{r11, lr}			// sp가 -8만큼 lr과 r11의 자리를 만듬
   0x00010464 <+4>:	add	r11, sp, #4			// sp = stack pointer sp+4 => r11 0xf6ffeee4
   0x00010468 <+8>:	sub	sp, sp, #8			// sp-8 0xf6ffeed8
=> 0x0001046c <+12>:	mov	r3, #2				// r3 = 2 
   0x00010470 <+16>:	str	r3, [r11, #-12]			// r3의 값을 r11(#-12) 시스템 메모리에 저장
   0x00010474 <+20>:	ldr	r0, [r11, #-12]			// r0(reg) 에 r11(#-12)(sys)(r3)에 있던 값을 읽어서 
									레지스터에 저장
   0x00010478 <+24>:	bl	0x10438 <my_func>
   0x0001047c <+28>:	str	r0, [r11, #-8]			// r0(reg) 의 값을 r11(#-8) 시스템 메모리에 저장 
								// r11(#-8) = 4
   0x00010480 <+32>:	ldr	r1, [r11, #-8]			// r11(#-8) 시스템 메모리 를 r1(reg) 에 저장
								// r1 = 4
   0x00010484 <+36>:	ldr	r0, [pc, #16]	; 0x1049c <main+60>
   0x00010488 <+40>:	bl	0x102e0 <printf@plt>
   0x0001048c <+44>:	mov	r3, #0				// r3 = 0
   0x00010490 <+48>:	mov	r0, r3				// r0 = r3
   0x00010494 <+52>:	sub	sp, r11, #4			// ~~
   0x00010498 <+56>:	pop	{r11, pc}
   0x0001049c <+60>:	andeq	r0, r1, r0, lsl r5


(gdb) s
my_func (num=2) at arm_func.c:5
5		return num * 2;
(gdb) disas
Dump of assembler code for function my_func:
   0x00010438 <+0>:	push	{r11}		; (str r11, [sp, #-4]!)// push 할때 최상위 stack 의 주소값 
   0x0001043c <+4>:	add	r11, sp, #0			// 
   0x00010440 <+8>:	sub	sp, sp, #12			// stack create
   0x00010444 <+12>:	str	r0, [r11, #-8]			// r11(#-8)(sys)에 r0(reg)값을 저장
=> 0x00010448 <+16>:	ldr	r3, [r11, #-8]			// r3(reg) = 2
   0x0001044c <+20>:	lsl	r3, r3, #1			// r3 = 2 * 2
   0x00010450 <+24>:	mov	r0, r3				// r0 = 4
   0x00010454 <+28>:	sub	sp, r11, #0			// stack remove
   0x00010458 <+32>:	pop	{r11}		; (ldr r11, [sp], #4)
   0x0001045c <+36>:	bx	lr
End of assembler dump.

초기 레지스터 상태
(gdb) info register
r0             0x1	1
r1             0xf6fff034	-150998988
r2             0xf6fff03c	-150998980
r3             0x10460	66656
r4             0x104a0	66720
r5             0x0	0
r6             0x10310	66320
r7             0x0	0
r8             0x0	0
r9             0x0	0
r10            0xf67fe000	-159391744
r11            0x0	0
r12            0xf6ffef60	-150999200
sp             0xf6ffeee8	0xf6ffeee8
lr             0xf6689d14	-160916204
pc             0x10460	0x10460 <main>
cpsr           0x60000010	1610612752


intel 은 가변적이다 arm 은 4byte 고정적이다 (RISC와 CISC의 차이점)
r11	=	연산, 이전 stack 의 백업
lr	= 	
sp	=	stack pointer
bl 	= 	branch link = call 분기 
bx	= 	분기




#include <stdio.h>

int main(void)
{ 
	int i;
	unsigned int test_arr[7] = {0};

	register unsigned int *r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;
	register unsigned int r6 asm("r6") = 0;

	r0 = test_arr;

	asm volatile("mov r1, #0x3\n"
				"mov r2, r1, lsl #2\n"
				"mov r4, #0x2\n"
				"add r3, r1, r2, lsl r4\n"
				"stmia r0!, {r1, r2, r3}\n"
				"str r4, [r0]\n"
				"mov r5, #128\n"
				"mov r6, r5, lsr #3\n"
				"stmia r0, {r4, r5, r6}\n"
				"sub r0, r0, #12\n"
				"ldmia r0, {r4, r5, r6}\n"
				"swp r6, r3, [r0]");	// [r0]값을 r3 로 옮기고 r6와 r3 값을 swp

	for(i = 0; i < 7; i++)
		printf("test_arr[%d] = %d\n", i, test_arr[i]);

	printf("r3 = %u, r4 = %u, r5 = %u, r6 = %u\n", r3, r4, r5, r6);

	return 0;
}

arm 의 리턴값은 r0
arm 에서 인자는 r1, r2, r3, r4 에 저장 , 오버시에는 스택으로


#include <stdio.h>
#include <math.h>

int main(void)
{ 
	register unsigned int r0 asm("r0") = (unsigned int)pow(2.0, 26);
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;
	register unsigned int r6 asm("r6") = 0;

	asm volatile("clz r1, r0");		가장 앞에서 나오는 1를 찾아라

	printf("r1 = %u, r0 = 0x%x\n", r1, r0);

	return 0;
}




