if(r1 > r2) 는 r1과 r2를 (sub) 하고 0보다 크다면(cmp) 참


(gdb) disas
Dump of assembler code for function main:
   0x00010438 <+0>:	push	{r11, lr}
   0x0001043c <+4>:	add	r11, sp, #4
=> 0x00010440 <+8>:	mov	r1, #77	; 0x4d
   0x00010444 <+12>:	mov	r2, #37	; 0x25
   0x00010448 <+16>:	mov	r3, #34	; 0x22
   0x0001044c <+20>:	mov	r12, r1
   0x00010450 <+24>:	mov	r0, r2
   0x00010454 <+28>:	cmp	r12, r0
   0x00010458 <+32>:	bls	0x10460 <main+40>
   0x0001045c <+36>:	subgt	r3, r3, #1
   0x00010460 <+40>:	ldr	r0, [pc, #12]	; 0x10474 <main+60>
   0x00010464 <+44>:	bl	0x102e0 <printf@plt>
   0x00010468 <+48>:	mov	r3, #0
   0x0001046c <+52>:	mov	r0, r3
   0x00010470 <+56>:	pop	{r11, pc}
   0x00010474 <+60>:	andeq	r0, r1, r8, ror #9
End of assembler dump.
(gdb) s
11		r2 = 37;
(gdb) s
12		r3 = 34;
(gdb) p/x $cpsr
$1 = 0x60000010
(gdb) 
$2 = 0x60000010
(gdb) 
$3 = 0x60000010
(gdb) 
$4 = 0x60000010
(gdb) s
14		if(r1 > r2)
(gdb) p/x $cpsr
$5 = 0x60000010
(gdb) s
16			asm volatile("subgt r3, r3, #1"); 		//r1 = 77, r2 = 37, r3 = 33
			// gt(greater than) 
			// 0x60000010 0x20000010 으로 바뀐 이유는 제로플레그 때문이다.
			// 0이 아닐때 제로플레그 해제
			// 0일때 제로플레그 활성화
(gdb) p/x $cpsr
$6 = 0x20000010
(gdb) 
$7 = 0x20000010
(gdb) 
$8 = 0x20000010
(gdb) 
$9 = 0x20000010
(gdb) 






(gdb) disas
Dump of assembler code for function main:
   0x00010438 <+0>:	push	{r11, lr}
   0x0001043c <+4>:	add	r11, sp, #4
=> 0x00010440 <+8>:	mov	r1, #77	; 0x4d
   0x00010444 <+12>:	mov	r2, #37	; 0x25
   0x00010448 <+16>:	mov	r3, #34	; 0x22
   0x0001044c <+20>:	mov	r12, r2
   0x00010450 <+24>:	mov	r0, r1
   0x00010454 <+28>:	cmp	r12, r0
   0x00010458 <+32>:	bcs	0x10460 <main+40>
   0x0001045c <+36>:	sublt	r3, r2, r3
   0x00010460 <+40>:	ldr	r0, [pc, #12]	; 0x10474 <main+60>
   0x00010464 <+44>:	bl	0x102e0 <printf@plt>
   0x00010468 <+48>:	mov	r3, #0
   0x0001046c <+52>:	mov	r0, r3
   0x00010470 <+56>:	pop	{r11, pc}
   0x00010474 <+60>:	andeq	r0, r1, r8, ror #9
End of assembler dump.
(gdb) s
11		r2 = 37;
(gdb) s
12		r3 = 34;
(gdb) p/x $cpsr
$1 = 0x60000010
(gdb) 
$2 = 0x60000010
(gdb) 
$3 = 0x60000010
(gdb) s
14		if(r2 < r1)
(gdb) s
15			asm volatile("sublt r3, r2, r3");		//r1 = 77, r2 = 37, r3 = 3
(gdb) p/x $cpsr
$4 = 0x80000010
		// 0x800010 	8 * 4 = 32 	8 은 negative
		// 0x600010	
		// 0x200010 	
(gdb) 






#include <stdio.h>


int main(void)
{
	register unsigned int r0 asm("r0");
	register unsigned int r1 asm("r1");
	register unsigned int r2 asm("r2");
	register unsigned int r3 asm("r3");
	register unsigned int r4 asm("r4");
	register unsigned int r5 asm("r5");

	r1 = 77;
	r2 = 37;
	r3 = 34;
	r5 = 3;

	if(r2 <= r1)
		asm volatile("rsble r4, r5, #5");	// reverse subtract

	printf("r4 = %d\n", r4);
	return 0;

}

 

#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0");
	register unsigned int r1 asm("r1");
	register unsigned int r2 asm("r2");
	register unsigned int r3 asm("r3");
	register unsigned int r4 asm("r4");
	register unsigned int r5 asm("r5");

	r1 = 34;	// 100010
	r2 = 37;	// 100101
	r5 = 3;

	asm volatile("and r0, r1, r2");		// and연산 

	show_reg(r0);
	return 0;
}




#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0");
	register unsigned int r1 asm("r1");
	register unsigned int r2 asm("r2");
	register unsigned int r3 asm("r3");
	register unsigned int r4 asm("r4");
	register unsigned int r5 asm("r5");

	r0 = 7;
	r1 = 7;

	if(r0 == r1)
	{
		r3 = 42;
		//BIC  : & ~ , 비트클리어
		//eq : equality
		asm volatile("biceq r2, r3, #7");	// 7의 비트 클리어 
				// r2 = 42 & ~(2^3 -1)
	}
	

	show_reg(r2);
	return 0;
}

#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	if(r0 == r1)
	{
		r0 = 10;
		r3 = 5;
		asm volatile("eors r1, r3, r0");	// eor : Exclusive-OR
					//	1010 EOR 0101	= 1111
	}
	

	show_reg(r1);
	return 0;
}






#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("cmp r0, r1");
	asm volatile("mvneq r1, #3");	// mvn = negative 
	// 쓰는이유 
	// arm 은 무조건 4바이트 

	printf("r1 = 0x%x\n", r1);

	return 0;
}



#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r0, #0xff, 16");
	// ror = right rotation 오른쪽으로 8비트 로테이션 

	printf("r0 = 0x%x\n", r0);

	return 0;
}



#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r1, #7");
	asm volatile("mov r2, #3");
	asm volatile("add r0, r1, r2, lsl #7");	// 3 * 2^7 = 384 + 7 = 391
	// lsl (logical shift left) 10진수는 391, 16진수로 187


	printf("r0 = 0x%x\n", r0);
	printf("%d\n", r0);	// arm 에서 함수의 리턴값은 r0 에 저장되므로 391이 아닌 11 = printf함수의 리턴값
				// context switch 때문에 값이 변함

	return 0;
}


#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r1, #7");
	asm volatile("mov r2, #3");
	asm volatile("mov r3, #2");
	asm volatile("add r0, r1, r2, lsl r3");		// 3 * 2^2 = 12 + 7 = 19 	16진수 는 0x13
	

	printf("r0 = 0x%x\n", r0);
	printf("%d\n", r0);

	return 0;
}




#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r1, #32");
	asm volatile("add r0, r1, asr #2");	// 2^2 나눗셈 32 % 4 = 8
	// arithmetic shift right: lsr 과 같다, 오른쪽으로 숫자를 시프트 하는데, 반올림 없이 2^n 으로 나눈것
	// 부호가 없는 나눗셈

	printf("r0 = 0x%x\n", r0);
	printf("%d\n", r0);

	return 0;
}


#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r2, #3");
	asm volatile("mov r3, #7");
	asm volatile("mul r1, r2, r3");		// mul =  dsp instruction   3 * 7 = 21

	printf("r1 = 0x%x\n", r1);

	return 0;
}


#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r2, #3");
	asm volatile("mov r3, #7");
	asm volatile("mov r4, #33");
	asm volatile("mla r1, r2, r3, r4");	
	//SIMD(single Instruction Multiple Data)	Intel은 mul이 5클럭, arm 은 mul, add 를 1클럭 
	//DSP 가 지원해야 가능 (대부분)

	printf("r1 = 0x%x\n", r1);

	return 0;
}



#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r2, #0x44, 8");	// r2 = 0x4000000
	asm volatile("mov r3, #0x200");		// r3 = 0x200
	asm volatile("umull r0, r1, r2, r3");	// r2 * r3 = [r1:r0]  // [High:Low]
	// 0x8800000000		r1 = 88	r0 = 00000000
	// unsigned Multiply Long은 64비트 곱셈연산
	// 2개의 부호 없는 32비트 숫자를 곱하여 64비트 숫자로 만든 다음, 2개의 레지스터 RdHi, RdLo = rm * rs에 저장한다.

	printf("r1r0 = 0x%x%x\n", r1, r0);

	return 0;
}


#include <stdio.h>

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{ 
	register unsigned int r0 asm("r0") = 0;
	register unsigned int r1 asm("r1") = 0;
	register unsigned int r2 asm("r2") = 0;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	asm volatile("mov r0, #0xf");
	asm volatile("mov r1, #0x1");
	asm volatile("mov r2, #0x44, 8");
	asm volatile("mov r3, #0x200");
	asm volatile("umlal r0, r1, r2, r3");
	// [88]high[00000000]low
	// 88 + 0x1 = 89(high) / 00000000 + f = f0000000(low)

	printf("r1r0 = 0x%x%x\n", r1, r0);

	return 0;
}



// ARM 메모리 to register 가 불가능 하므로 ldr 을 이용해 load 한다.
#include <stdio.h>

unsigned int arr[5]= {1,2,3,4,5};

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{ 
	register unsigned int r0 asm("r0") = 0;
	register unsigned int *r1 asm("r1") = NULL;
	register unsigned int *r2 asm("r2") = NULL;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	r1 = arr;

	asm volatile("mov r2, #0x8");
	asm volatile("ldr r0, [r1, r2]"); // r1 + 8  r1은 배열이므로 8바이트 만큼 더하면 배열의 3번째 값인 3이 나온다.
	// r0 레지스터에 memory값을 가져온다. 

	printf("r0 = %u\n", r0);
	
	return 0;
}



#include <stdio.h>

char test[] = {"HelloARM"};

void show_reg(unsigned int reg)
{
	int i;

	for(i = 31; i >= 0; )
		printf("%d", (reg >> i--) & 1);
	printf("\n");
}

int main(void)
{ 
	register unsigned int r0 asm("r0") = 0;
	register char *r1 asm("r1") = NULL;
	register unsigned int *r2 asm("r2") = NULL;
	register unsigned int r3 asm("r3") = 0;
	register unsigned int r4 asm("r4") = 0;
	register unsigned int r5 asm("r5") = 0;

	r1 = test;

	asm volatile("ldreqb r0, [r1, #0x5]");	// b는 바이트단위로 이동하겟다라는 뜻

	printf("r0 = %c\n", r0);
	
	return 0;
}


