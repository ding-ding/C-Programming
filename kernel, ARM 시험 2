난이도 : ☆☆
1.  리눅스 커널은 운영체제(OS)다.(배점 1점)
    OS가 관리해야 하는 제일 중요한 5가지에 대해 기술하시오.
메모리 관리자, 네트워크 관리자, 디바이스 관리자, 파일시스템 관리자, 태스크 관리자

난이도 : ☆
2.  Unix 계열의 모든 OS는 모든 것을 무엇으로 관리하는가 ?(배점 0.6점)
파일

난이도 : ☆☆☆
3.  리눅스에는 여러 장점이 있다.(배점 1점)
    아래의 장점들 각각에 대해 기술하라.

    * 사용자 임의대로 재구성이 가능하다.
    * 열약한 환경에서도 HW 자원을 적절히 활용하여 동작한다.
    * 커널의 크기가 작다.
    * 완벽한 멀티유저, 멀티태스킹 시스템
    * 뛰어난 안정성
    * 빠른 업그레이드
    * 강력한 네트워크 지원
    * 풍부한 소프트웨어

난이도 : ☆
4.  32bit System에서 User와 Kernel의 Space 구간을 적으시오.(배점 0.6점)

난이도 : ☆
5.  64bit System에서 User와 Kernel의 Space 구간을 적으시오.(배점 0.6점)

난이도 : ☆☆
6.  리눅스 실행 파일 포맷과 디버깅 파일 포맷이 무엇인지 적으시오.(배점 0.6점)
dwarf

난이도 : ☆☆
7.  프로세스와 스레드를 구별하는 방법에 대해 기술하시오.(배점 0.6점)

난이도 : ☆☆
8.  Kernel 입장에서 Process 혹은 Thread를 만들면 무엇을 생성하는가 ?(배점 0.6점)

난이도 : ☆☆
9.  리눅스 커널 소스에 보면 struct task_struct *current라는 것이 보인다.(배점 0.6점)
    이것이 무엇을 의미하는 것인지 적으시오.

난이도 : ☆☆☆
10. Memory Management 입장에서 Process와 Thread의 핵심적인 차이점은 무엇인가 ?(배점 1점)

난이도 : ☆☆☆
11. Task가 관리해야하는 3가지 Context가 있다.(배점 1점)
    System Context, Memory Context, HW Context가 있다.
    이중 HW Context는 무엇을 하기 위한 구조인가 ?

난이도 : ☆☆☆☆
12. Multi-Tasking을 Kernel의 내부 메커니즘과 연관하여 기술하시오.(배점 1점)
    (RQ, WQ, active, expired, queue등과 연관하여 자세히 기술하시오)

난이도 : ☆☆☆
13. thread_struct와 thread_union 구조체에 대해 기술하시오.(배점 1점)

난이도 : ☆☆☆
14. TASK_INTURRUPTIBLE과 TASK_UNINTERRUPTIBLE은 왜 필요한지 기술하시오.(배점 1점)

난이도 : ☆☆☆
15. Kernel Stack을 의미하는 구조체를 적고 Source 상에서 실제 크기가 몇인지 적으시오.(배점 0.6점)

난이도 : ☆☆☆
16. O(N)과 O(1) Algorithm에 대해 기술하시오.(배점 1점)
    그리고 무엇이 어떤 경우에 더 좋은지 기술하시오.

난이도 : ☆☆☆☆
17. 현재 4개의 CPU(0, 1, 2, 3)가 있고 각각의 RQ에는 1, 2개의 프로세스가 위치한다.(배점 1점)
    이 경우 2번 CPU에 있는 부모가 fork()를 수행하여 Task를 만들어냈다.
    이 Task는 어디에 위치하는 것이 좋을까 ?
    그리고 그 이유를 적으시오.

난이도 : ☆☆☆☆
18. 17번 문제에서 이번에는 0, 1, 3에 매우 많은 프로세스가 존재한다.(배점 1점)
    이 경우 3번에서 fork()를 수행하여 Task를 만들었다.
    이 Task는 어디에 위치하는 것이 좋을까 ?
    역시 이유를 적으시오.

난이도 : ☆☆☆
19. UMA와 NUMA에 대해 기술하고(배점 1점)
    Kernel에서 이들을 어떠한 방식으로 관리하는지 기술하시오.

난이도 : ☆☆☆
20. Kernel의 Scheduler가 동작하는 시점이 언제인지 모두 기술하시오.(배점 1점)

난이도 : ☆☆
21. Kernel의 Scheduling Mechanism에서 Static Priority와 Dynamic Priority 번호가 어떻게 되는지 적으시오.(배점 0.6점)

난이도 : ☆☆☆
22. 함수 호출에 있어 복귀 주소의 저장을 call(push + jmp), pop 명령어를 사용하여 진행했었다.(배점 1점)
    그렇다면 User와 Kernel간의 전환을 수행할때는 이러한 정보를 어떻게 처리해야 하는가 ?

난이도 : ☆☆☆☆
23. 여러개의 Task가 존재하고 있다.(배점 1점)
    이들은 tgid 값이 서로 같은 녀석들로 구성되어 있다.
    만약 이때 tgid 값을 가진 Task에 SIGKILL을 날리게 될 경우 어떻게 되는지 기술하시오.
    (Kernel 내부의 구조체와 연관지어 서술하시오)

난이도 : ☆☆☆
24. task_struct 구조체에도 sigpending이 존재하고 signal_struct에도 sigpending이 존재한다.(배점 1점)
    어떠한 이유로 같은 구조체의 포인터가 중복되게 들어 있는지 기술하시오.

난이도 : ☆☆
25. ZONE_DMA는 어떠한 용도로 사용 되는가 ?(배점 0.6점)

난이도 : ☆☆☆
26. 물리 메모리의 최소 단위를 무엇이라고 하며 크기가 얼마인가 ?(배점 1점)
    그리고 이러한 개념을 SW적으로 구현한 구조체의 이름은 무엇인가 ?

난이도 : ☆☆☆☆
27. Linux Kernel은 외부 단편화와 메모리 부하를 최소화하기 위해 Buddy 할당자를 사용한다.(배점 1점)
    Buddy 할당자의 Algorithm을 자세히 기술하시오.

난이도 : ☆☆☆☆
28. 27번에 이어 내부 단편화를 최소화 하기 위해 Buddy에서 Page를 받아 Slab 할당자를 사용한다.(배점 1점)
    Slab 할당자는 어떤식으로 관리되는지 기술하시오.

난이도 : ☆☆☆☆
29. Kernel은 Memory Management를 수행하기 위해 VM(가상 메모리)를 관리한다.(배점 1점)
    가상 메모리의 구조인 Stack, Heap, Data, Text는 어디에 기록되는가 ?
    (Task 구조체의 어떠한 구조체가 이를 표현하는지 기술하시오)

난이도 : ☆☆☆
30. 29번에서 Stack, Heap, Data, Text등 서로 같은 속성을 가진 Page를 모아서 관리하기 위한 구조체 무엇인가 ?(배점 1점)
    (역시 Task 구조체의 어떠한 구조체에서 어떠한 식으로 연결되는지 기술하시오)

난이도 : ☆☆☆
31. 프로그램을 실행한다고 하면 fork(), execve()의 콤보로 이어지게 된다.(배점 1점)
    이때 실제 gcc *.c로 컴파일한 a.out을 ./a.out을 통해 실행한다고 가정한다.
    실행을 한다고 하면 a.out File의 Text 영역에 해당하는 부분을 읽어야 한다.
    실제 Kernel은 무엇을 읽고 이 영역들을 적절한 값으로 채워주는가 ?

난이도 : ☆☆☆☆
32. User Space에도 Stack이 있고 Kernel Space에도 Stack이 존재한다.(배점 1점)
    좀 더 정확히는 각각에 모두 Stack, Heap, Data, Text의 메모리 기본 구성이 존재한다.
    그 이유에 대해 기술하시오.

난이도 : ☆☆☆☆
33. VM(가상 메모리)와 PM(물리 메모리)를 관리하는데 있어(배점 1점)
    VM을 PM으로 변환시키는 Paging Mechanism에 대해 Kernel에 기반하여 서술하시오.

난이도 : ☆☆☆
34. MMU(Memory Management Unit)의 주요 핵심 기능을 모두 적고 간략히 설명하시오.(배점 1점)

난이도 : ☆☆☆
35. 하드디스크의 최소 단위를 무엇이라 부르고 그 크기는 얼마인가 ?(배점 1점)


난이도 : ☆☆☆
36. MBR(Master Boot Record)가 무엇인지 서술하시오.(배점 1점)

난이도 : ☆☆☆
37. '/' 디렉토리의 위치를 찾기 위해서는 무엇을 다루어야 하는가 ?(배점 1점)
    (Kernel의 구조체중 ext2_sb_info와 같은 것이 있었을 텐데 이를 무엇이라 불럿는가 ?)

난이도 : ☆☆☆☆
38. EXT2 File System의 Inode는 ext2_inode라는 구조체로 구성된다.(배점 1점)
    이 구조체에서 i_block[]이라는 배열을 볼 수 있는데
    이 i_block은 어떠한 용도로 사용되는지 기술하시오.
    (최종적으로 이것에 의해 EXT2는 얼마의 크기를 허용할 수 있는지 기술하시오)

난이도 : ☆☆☆
39. 38번 문제에서 어떤 파일이 5MB에 공간을 차지해야 한다고 가정한다.(배점 1점)
    이 공간은 i_block의 몇 번째에 Indexing 되어야 하는가 ?

난이도 : ☆☆☆
40. EXT2, EXT3, EXT4의 차이점은 각각 무엇인가 ?(배점 1점)

난이도 : ☆☆☆☆
41. Task 구조체의 Pointer에 연결되어 있는 구조체들중 inode와 super_block은 어떠한 정보를 포함하는지 기술하시오.(배점 1점)

난이도 : ☆☆☆☆
42. VFS(Virtual File System)이 동작하는 Mechanism에 대해 서술하시오.(배점 1점)

난이도 : ☆☆☆
43. Linux Kernel에서 Interrupt를 크게 2가지로 분류한다.(배점 0.6점)
    그 2가지에 대해 각각 기술하고 간략히 설명하시오.

난이도 : ☆☆
44. 내부 인터럽트는 다시 크게 3분류로 나눌 수 있다.(배점 0.6점)
    3가지를 분류하시오.

난이도 : ☆☆☆☆
45. 44번에서 분류한 녀석들의 특징에 대해 기술하시오.(배점 1점)

난이도 : ☆☆☆☆
46. 예로 모니터 2개를 쓰는 경우 양쪽에 모두 인터럽트를 공유해야 한다.(배점 1점)
    Linux Kernel에서는 어떠한 방법을 통해 이들을 공유하는가 ?

난이도 : ☆☆
47. Linux Kernel에서 인터럽트 테이블을 관리하기 위해 존재하는 구조체 이름을 적으시오.(배점 0.6점)

난이도 : ☆☆
48. System Call 호출시 Kernel에서 실제 System Call을 처리하기 위해(배점 0.6점)
    Indexing을 수행하여 적절한 함수가 호출되도록 주소값을 저장해놓고 있다.
    이 구조체의 이름을 적으시오.

난이도 : ☆☆☆
49. 48에서 User Space에서 System Call 번호를 전달한다.(배점 1점)
    Intel Machine에서는 이를 어디에 저장하는가 ?
    또한 ARM Machine에서는 이를 어디에 저장하는가 ?

난이도 : ☆☆☆
50. Paging Mechanism에서 핵심이 되는 Page Directory는 mm_struct의 어떤 변수가 가지고 있는가 ?(배점 0.6점)

난이도 : ☆☆
51. 또한 Page Directory를 가르키는 Intel 전용 Register가 존재한다.(배점 0.6점)
    이 Register의 이름을 적으시오.

난이도 : ☆☆☆
52. Micro Kernel의 특징을 기술하시오.(배점 0.6점)

난이도 : ☆☆☆
53. Monolithic Kernel의 특징을 기술하시오.(배점 0.6점)

난이도 : ☆☆
54. Linux Kernel은 Micro 혹은 Monolithic 어떠한 것인가 ?(배점 0.6점)

난이도 : ☆☆☆
55. Linux에 Device Driver는 52, 53에서 어떠한 형태인가 ?(배점 0.6점)
    그리고 이를 취함으로써 얻게된 이점은 무엇인가 ?

난이도 : ☆
56. module_init() 함수 호출은 언제 이루어지는가 ?(배점 0.3점)

난이도 : ☆
57. module_exit() 함수 호출은 언제 이루어지는가 ?(배점 0.3점)

난이도 : ☆☆☆
58. Device Driver 작성시 Wrapping 해야하는 부분이 어디인가 ?(배점 0.6점)
    (Task 구조체에서 부터 연결된 부분까지를 쭉 이어서 작성하라)

난이도 : ☆☆☆
59. Device Driver는 Major Number와 Minor Number를 통해 Device를 관리한다.(배점 0.6점)
    실제 Device의 Major Number와 Minor Number를 저장하는 변수는 어떤 구조체의 어떤 변수인가 ?
    (역시 Task 구조체에서부터 쭉 찾아오길 바람)

난이도 : ☆☆☆☆
60. 예로 간단한 Character Device Driver를 작성했다고 가정해본다.(배점 1점)
    그리고 insmod를 통해 Driver를 Kernel내에 삽입했으며
    mknod를 이용하여 /dev/장치파일을 생성하였다.
    그리고 이에 적절한 User 프로그램을 동작시켰다.
    이 Driver가 실제 Kernel에서 어떻게 관리되고 사용되는지 내부 Mechanism을 기술하시오.

난이도 : ☆☆☆☆
61. Kernel 자체에 kmalloc(), vmalloc(), __get_free_pages()를 통해 메모리를 할당할 수 있다.(배점 1점)
    또한 kfree(), vfree(), free_pages()를 통해 할당한 메모리를 해제할 수 있다.
    이러한 Mechanism이 필요한 이유가 무엇인지 자세히 기술하라.

난이도 : ☆☆☆☆☆
62. 간단한 Character Device Driver를 작성하시오.(배점 10점)
    우선 동작만 하게하면 된다.
    read, lseek, write, ioctl, close가 잘 동작하는지 살펴보라!

난이도 : ☆☆☆☆☆☆
63. 62번의 Character Device Driver를 아래와 같이 동작하게 만드시오.(배점 10점)
    read(fd, 1, 10)을 동작시킬 경우 2번째 인자 ~ 3번째 인자 까지의 덧셈을 반환하도록 한다.
    write(fd, 1, 5)를 동작시킬 경우 2번째 인자 ~ 5번째 인자 까지의 곱셈을 반환하도록 한다.
    lseek(fd, 7, SEEK_END)를 동작시킬 경우 2번째 인자값을 반환하고
    Kernel 내에서 "SEEK_END means end"를 출력하게 하라!
    close(fd)를 수행하면 Kernel 내에서 "Finalize Device Driver"가 출력되게 하라!

난이도 : ☆☆☆☆
64. Linux Kernel에서 Networking에 사용되는 핵심적 구조체에 해당한다.(배점 0.6점)
    우리가 Network에서 Packet(패킷)이라 부르는 것이 결국 이 구조체다.
    여기서 말하는 이 구조체는 무엇인가 ?

난이도 : ☆☆☆☆
65. Pipeline은 ILP(Instruction Level Parallelization)를 향상시키기 위해 사용된다.(배점 1점)
    Pipeline이 존재할때와 존재하지 않을때를 비교하여 동작 과정과 어떠한 이점이 있는지 기술하라.

난이도 : ☆☆☆☆
66. Super-Scalar Processor는 Pipeline이 복수개 있는 것이다.(배점 1점)
    이 녀석이 어떤 경우에 잘 동작할 수 있는지 기술하라.

난이도 : ☆☆☆☆
67. OoO(Out-of-Order)인 비순차 실행에 대해 기술하라.(배점 1점)

난이도 : ☆☆☆☆
68. Compiler의 Instruction Scheduling에 대해 기술하라.(배점 1점)

난이도 : ☆☆☆
69. CISC 와 RISC Architecture에 대한 차이점을 기술하라.(배점 1점)

난이도 : ☆☆☆
70. Compiler의 Instruction Scheduling은 Run-Time이 아닌 Compile-Time에 결정된다.(배점 0.6점)
    고로 이를 Static Instruction Scheduling이라 할 수 있다.
    Intel 계열의 Machine에서는 Compiler의 힘을 빌리지 않고도
    어느저도의 Instruction Scheduling을 HW의 힘만으로 수행할 수 있다.
    이러한 것을 무엇이라 부르는가 ?

난이도 : ☆☆☆☆
71. Pipeline이 깨지는 경우에 대해 자세히 기술하시오.(배점 1점)

난이도 : ☆☆☆
72. CPU들은 각각 저마다 이것을 가지고 있다.(배점 1점)
    Compiler 개발자들은 이것을 고려해서 Compiler를 만들어야 한다.
    또한 HW 입장에서도 이것을 고려해서 설계를 해야 한다.
    여기서 말하는 이것이란 무엇인가 ?

난이도 : ☆☆☆☆☆
73. Intel의 Hyper Threading 기술에 대해 상세히 기술하시오.(배점 1점)

난이도 : ☆☆☆☆☆☆☆
74. 그동안 많은 것을 배웠을 것이다.(배점 20점)
    최종적으로 수업시간마다 그려줬던 Kernel Map을 그려보도록 한다.
    (Networking 부분은 생략해도 좋다)
    예로는 다음을 생각해보도록 한다.
    여러분이 좋아하는 게임을 더블 클릭하여 실행한다고 할 때
    그 과정 자체를 Linux Kernel에 입각하여 기술하도록 하시오.
    (그림과 설명을 같이 넣어주길 바람)

